@page "/semesters"
@using GradeManagement.Client.Components.NewDialogs
@layout AuthenticatedLayout

@inject HttpClient Http
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SemesterClient SemesterClient

<PageTitle>Semesters</PageTitle>

<LoadingComponent LongTask="@Loading" @ref="loadingRef">
    <MudDataGrid T="Semester" Items="_semesters" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <DataGridActions TItem="Semester" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private ICollection<Semester> _semesters = new List<Semester>();
    private LoadingComponent loadingRef;

    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewSemesterDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            await SemesterClient.CreateAsync(result.Data as Semester);
            SnackbarService.ShowAddSuccess();
            await loadingRef.StartLoading();
        }
    }

    private async Task StartEditing(CellContext<Semester?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task Loading()
    {
        _semesters = await SemesterClient.GetAllAsync();
    }

    private async Task CommittedItemChanges(Semester items)
    {
        //await SemesterClient.UpdateAsync(items);
        SnackbarService.ShowError("Update not implemented.");
    }

    private async Task DeleteItem(Semester item)
    {
        await SemesterClient.DeleteAsync(item.Id);
        SnackbarService.ShowDeleteSuccess();
        await loadingRef.StartLoading();
        StateHasChanged();
    }

}
