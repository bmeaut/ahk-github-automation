

@inject HttpClient Http
@inject SubjectService SubjectService

<LoadingComponent LongTask="@_loading">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@course.Name</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" OnClick="@(() => EditMode = !EditMode)"/>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="@course.MoodleCourseId" Label="Moodle Course Id" Disabled="@(!EditMode)"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="@course.Semester.Name" Label="Semester" Disabled="@(!EditMode)"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="@course.Language.Name" Label="Language" Disabled="@(!EditMode)"/>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</LoadingComponent>

@code {
    [Parameter] public int Id { get; set; }
    Course course;
    private bool EditMode { get; set; } = false;
    private List<long> SelectedTeacherIds { get; set; } = new();
    private List<long> SelectedGroupIds { get; set; } = new();
    private IEnumerable<Exercise> SelectedTask { get; set; } = new List<Exercise>();

    private List<Exercise> AvailableTasks { get; set; } = new();


    public async Task<IEnumerable<Exercise>> ExerciseSearchFunc(string search)
    {
        if (string.IsNullOrEmpty(search))
        {
            return AvailableTasks;
        }

        return await Task.FromResult(AvailableTasks.Where(x => x.Name.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task<Course> _loadCourseAsync()
    {
        await Task.Delay(2000);
        return await Http.GetFromJsonAsync<Course>($"{Endpoints.COURSES}/{Id}");
    }

    /*protected override async Task OnInitializedAsync()
    {
        course = await _loadCourseAsync();
    }*/

    private async Task _loading()
    {
        course = await _loadCourseAsync();
        AvailableTasks = await SubjectService.LoadExercises();

    }

}
