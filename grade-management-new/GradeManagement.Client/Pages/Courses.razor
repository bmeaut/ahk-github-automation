@page "/courses"
@layout AuthenticatedLayout

@using GradeManagement.Client.Components.NewDialogs
@implements IDisposable
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject CourseClient CourseClient
@inject SubjectClient SubjectClient
@inject NavigationManager NavigationManager



<style>
    .clickable-rows .mud-table-body .mud-table-row {
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .clickable-rows .mud-table-body .mud-table-row:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }
</style>

<PageTitle>Courses</PageTitle>

<LoadingComponent @ref="loadingComponentRef" LongTask="@_loading">
    <MudText Typo="Typo.h4" Class="mt-4">Courses</MudText>
    <MudDivider Class="mb-4"/>
    <MudDataGrid T="Course" Items="_courses" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges" RowClick="@RowClickEvent" Class="clickable-rows">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" Editable="false" />
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.MoodleCourseId" Title="Moodle Course Id"/>
            <TemplateColumn Title="Semester">
                <CellTemplate>
                    @context.Item.Semester.Name
                </CellTemplate>
                <EditTemplate>
                    <SelectSemester @bind-Value="@context.Item.Semester"/>
                </EditTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Language">
                <CellTemplate>
                    @context.Item.Language.Name
                </CellTemplate>
                <EditTemplate>
                    <SelectLanguage @bind-Value="@context.Item.Language"/>
                </EditTemplate>
            </TemplateColumn>
            <DataGridActions TItem="Course" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private ICollection<Course> _courses = new List<Course>();
    private LoadingComponent loadingComponentRef;

    private void RowClickEvent(DataGridRowClickEventArgs<Course> args)
    {
        var courseId = args.Item.Id;
        NavigationManager.NavigateTo($"/courses/{courseId}");
    }

    private async Task _loading()
    {
        _courses = await SubjectClient.GetAllCoursesByIdAsync(SubjectService.CurrentSubject.Id);
        StateHasChanged();
    }


    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewCourseDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            var newCourse = result.Data as Course;
            newCourse.SubjectId = SubjectService.CurrentSubject.Id;
            await CourseClient.CreateAsync(newCourse);
            await _loading();
        }
    }

    private async Task StartEditing(CellContext<Course?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task CommittedItemChanges(Course items)
    {
        await CourseClient.UpdateAsync(items.Id, items);
        //StateHasChanged();
        SnackbarService.ShowEditSuccess();
        //await loadingComponentRef.StartLoading();
        _courses = await SubjectClient.GetAllCoursesByIdAsync(SubjectService.CurrentSubject.Id);
    }

    private async Task DeleteItem(Course item)
    {
        await CourseClient.DeleteAsync(item.Id);
        SnackbarService.ShowDeleteSuccess();
        await loadingComponentRef.StartLoading();
        StateHasChanged();
    }

    private void OnSubjectChanged()
    {
        loadingComponentRef.StartLoading();
    }

    protected override void OnInitialized()
    {
        SubjectService.OnChange += OnSubjectChanged;
    }

    public void Dispose()
    {
        SubjectService.OnChange -= OnSubjectChanged;
    }

}
