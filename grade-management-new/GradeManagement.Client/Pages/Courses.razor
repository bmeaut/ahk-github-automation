@page "/courses"

@inject HttpClient Http
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject NavigationManager NavigationManager

<LoadingComponent IsLoading="@_isLoading">
    <MudDataGrid T="Course" Items="_courses" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges" RowClick="@RowClickEvent">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.MoodleCourseId" Title="Moodle Course Id"/>
            <TemplateColumn Title="Semester">
                <CellTemplate>
                    @context.Item.Semester.Name
                </CellTemplate>
                <EditTemplate>
                    <SelectSemester @bind-Value="@context.Item.Semester"/>
                </EditTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Language">
                <CellTemplate>
                    @context.Item.Language.Name
                </CellTemplate>
                <EditTemplate>
                    <SelectLanguage @bind-Value="@context.Item.Language"/>
                </EditTemplate>
            </TemplateColumn>
            <DataGridActions TItem="Course" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private List<Course> _courses = new();
    private bool _isLoading = true;

    readonly string BaseUrl = Endpoints.COURSES;

    private void RowClickEvent(DataGridRowClickEventArgs<Course> args)
    {
        var courseId = args.Item.Id;
        NavigationManager.NavigateTo($"/courses/{courseId}");
    }


    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewCourseDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            _courses.Add(result.Data as Course);
            var response = await Http.PostAsJsonAsync(BaseUrl, result.Data);
            if (response.IsSuccessStatusCode)
            {
                Course newObject = await response.Content.ReadFromJsonAsync<Course>();
                //Right now it needs Course list to be filled
                _courses.Remove(result.Data as Course);
                _courses.Add(newObject);
                SnackbarService.ShowAddSuccess();
            }
            else
            {
                _courses.Remove(result.Data as Course);
                await Console.Error.WriteLineAsync("Error");
                SnackbarService.ShowAddError();
            }
        }
    }

    private async Task StartEditing(CellContext<Course?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _courses = await SubjectService.LoadCourses();
        _isLoading = false;
    }

    private async Task CommittedItemChanges(Course items)
    {
        var response = await Http.PutAsJsonAsync($"{BaseUrl}/{items.Id}", items);
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowEditError();
        }
        else
        {
            SnackbarService.ShowEditSuccess();
        }
    }

    private async Task DeleteItem(Course item)
    {
        _courses.Remove(item);
        var response = await Http.DeleteAsync($"{BaseUrl}/{item.Id}");
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowDeleteError();
        }
        else
        {
            SnackbarService.ShowDeleteSuccess();
        }

        StateHasChanged();
    }

}
