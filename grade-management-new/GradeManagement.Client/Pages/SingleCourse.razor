@page "/courses/{Id:int}"
@using System.Net
@using GradeManagement.Client.Components.NewDialogs
@layout AuthenticatedLayout

@inject CrudSnackbarService SnackbarService
@inject IDialogService DialogService
@inject CourseClient CourseClient
@inject ExerciseClient ExerciseClient
@inject GroupClient GroupClient

<LoadingComponent LongTask="@_loading" @ref="loadingRef">
    <PageTitle>Course @_course.Name</PageTitle>
    <MudText Typo="Typo.h4" Class="mt-4">@_course.Name</MudText>
    <MudDivider Class="mb-4"/>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudField Label="Moodle Course Id" Variant="Variant.Text">@_course.MoodleCourseId</MudField>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudField Label="Semester" Variant="Variant.Text">@_course.Semester.Name</MudField>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudField Label="Language" Variant="Variant.Text">@_course.Language.Name</MudField>
        </MudItem>
        <MudItem xs="12">
            <MudStack AlignItems="AlignItems.Center" Style="width: 100%">
                <MudText Typo="Typo.h6" Style="align-self: start">Exercises:</MudText>
                <ExerciseDataGrid Values="_exercises"/>
                <MudButton Color="@Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@NewExerciseDialog">New Exercise</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudStack AlignItems="AlignItems.Center" Style="width: 100%">
                <MudText Typo="Typo.h6" Style="align-self: start">Groups:</MudText>
                <GroupDataGrid Values="_groups"/>
                <MudButton Color="@Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@NewGroupDialog">New Group</MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</LoadingComponent>

@code {
    [Parameter] public int Id { get; set; }
    Course _course;
    ICollection<Exercise> _exercises;
    ICollection<Group2> _groups;
    private LoadingComponent loadingRef;

    private async Task<Course> _loadCourseAsync()
    {
        return await CourseClient.GetByIdAsync(Id);
    }

    private async Task<ICollection<Exercise>> _loadExercisesAsync()
    {
        return await CourseClient.GetAllExercisesByIdAsync(Id);
    }

    private async Task<ICollection<Group2>> _loadGroupsAsync()
    {
        return (await CourseClient.GetAllGroupsByIdAsync(Id)).Select(x => x.ToGroup2()).ToList();
    }

    private async Task _loading()
    {
        _course = await _loadCourseAsync();
        _exercises = await _loadExercisesAsync();
        _groups = await _loadGroupsAsync();
    }

    private async Task NewExerciseDialog()
    {
        var dialog = await DialogService.ShowAsync<NewExerciseDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            var exercise = result.Data as Exercise;
            exercise.CourseId = Id;
            await ExerciseClient.CreateAsync(exercise);
            SnackbarService.ShowAddSuccess();
            await loadingRef.StartLoading();
        }
    }

    private async Task NewGroupDialog()
    {
        var dialog = await DialogService.ShowAsync<NewGroupDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            var group = result.Data as Group2;
            group.CourseId = Id;
            await GroupClient.CreateAsync(group);
            SnackbarService.ShowAddSuccess();
            await loadingRef.StartLoading();
        }
    }

}
