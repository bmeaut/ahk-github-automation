@page "/"
@layout AuthenticatedLayout

@inject SubjectService SubjectService
@inject SubjectClient SubjectClient
@inject CourseClient CourseClient
@inject ExerciseClient ExerciseClient
@inject AssignmentClient AssignmentClient
<PageTitle>AHK Review UI</PageTitle>

<style>
    .sort-direction-icon {
        --path-svg: 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z'
    }

    .sort-direction-icon.mud-direction-asc {
        --path-svg: 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z'
    }

    .sort-direction-icon.mud-direction-desc {
        --path-svg: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'
    }

    .custom-grid .mud-table-cell .column-header .column-options .sort-direction-icon path {
        d: path(var(--path-svg))
    }
</style>

<LoadingComponent LongTask="@Loading" @ref="loadingRef">

    <MudStack Row="true" Class="mt-6">
        <MudSelect T="Course" Label="Course" @bind-Value="_selectedCourse" @bind-Value:after="CourseChanged"
                   Dense="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                   TransformOrigin="Origin.TopCenter">
            @foreach (var course in _courses ?? [])
            {
                <MudSelectItem Value="@course">@course.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer/>
        <MudSelect T="Exercise" Label="Exercise" @bind-Value="_selectedTask" @bind-Value:after="ExerciseChanged"
                   Dense="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                   TransformOrigin="Origin.TopCenter">
            @foreach (var task in _tasks ?? [])
            {
                <MudSelectItem Value="@task">@task.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer/>

        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Inherit" Edge="Edge.End" Size="Size.Large"/>
    </MudStack>
    <MudDataGrid Items="@_assignmentsData" T="Assignment" Class="custom-grid">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id"/>
            <PropertyColumn Property="x => x.GithubRepoName" Title="Repository name"/>
            @* <PropertyColumn Property="x => x.Student.NeptunCode" Title="Neptun"/> *@
            @* <PropertyColumn Property="x => JoinPullRequests(x)" Title="PRs"/> *@
            @* <PropertyColumn Property="x => JoinCiWorkflows(x)" Title="Workflows"/> *@
            @* <PropertyColumn Property="x => JoinScore(x)" Title="Pontok"/> *@
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Assignment"/>
        </PagerContent>
    </MudDataGrid>
</LoadingComponent>

@code
{

    #region Data Grid helpers

// private string JoinPullRequests(Assignment data)
// {
//     //Kéne menteni a branch nevét is?
//     return string.Join(", ", data.PullRequests.Select(x => x.Url));
// }
//
// private string JoinCiWorkflows(Assignment data)
// {
//     var filtered = data.AssignmentEvents?.Where(IsCicdWorkflow) ?? [];
//     var assignmentEvents = filtered as AssignmentEvent[] ?? filtered.ToArray();
//     string run = assignmentEvents.Length == 1 ? "run" : "runs";
//     return $"{assignmentEvents.Length} {run}, last: {assignmentEvents.LastOrDefault()?.Description}";
// }
//
// private bool IsCicdWorkflow(AssignmentEvent data)
// {
//     return true;
// }
//
// private string JoinScore(Assignment data)
// {
//     return string.Join(".", data.Scores.Select(x => x.Value));
// }

    #endregion
    //Van e assignolt teacher?
    //Mikor pontoztak? Tooltip
    //PR status - closed szűrve
    private LoadingComponent loadingRef;

    private Subject? _selectedSubject = null;
    private Course? _selectedCourse = null;
    private Exercise? _selectedTask = null;
    private IEnumerable<Course>? _courses = new List<Course>();
    private IEnumerable<Exercise>? _tasks = new List<Exercise>();
    private IEnumerable<Assignment> _assignmentsData = new List<Assignment>();


    private async Task Loading()
    {
        _selectedSubject = SubjectService.CurrentSubject;
        _courses = await SubjectClient.GetAllCoursesByIdAsync(_selectedSubject.Id);
    }

    private async Task CourseChanged()
    {
        _tasks = await CourseClient.GetAllExercisesByIdAsync(_selectedCourse.Id);
    }

    private async Task ExerciseChanged()
    {
        _assignmentsData = await ExerciseClient.GetAssignmentsByIdAsync(_selectedTask.Id);
    }
}
