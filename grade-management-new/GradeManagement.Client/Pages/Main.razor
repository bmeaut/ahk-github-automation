@page "/"
@layout AuthenticatedLayout

@inject SubjectService SubjectService
@inject SubjectClient SubjectClient
@inject CourseClient CourseClient
@inject ExerciseClient ExerciseClient
@inject AssignmentClient AssignmentClient
@inject DashboardClient DashboardClient

<style>
    .sort-direction-icon {
        --path-svg: 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z'
    }

    .sort-direction-icon.mud-direction-asc {
        --path-svg: 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z'
    }

    .sort-direction-icon.mud-direction-desc {
        --path-svg: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'
    }

    .custom-grid .mud-table-cell .column-header .column-options .sort-direction-icon path {
        d: path(var(--path-svg))
    }
</style>

<LoadingComponent LongTask="@Loading" @ref="loadingRef">
    <MudText Typo="Typo.h4" Class="mt-4">Dashboard</MudText>
    <MudDivider Class="mb-4"/>

    <MudStack Row="true" Class="mt-6">
        <MudSelect T="string" Label="Course" @bind-Value="_selectedCourse" @bind-Value:after="CourseChanged"
                   Dense="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                   TransformOrigin="Origin.TopCenter">
            @foreach (var course in _courses ?? [])
            {
                <MudSelectItem Value="@course">@course</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer/>
        <MudSelect T="string" Label="Exercise" @bind-Value="_selectedExercise" @bind-Value:after="ExerciseChanged"
                   Dense="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                   TransformOrigin="Origin.TopCenter">
            @foreach (var task in _tasks ?? [])
            {
                <MudSelectItem Value="@task">@task</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer/>

        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Inherit" Edge="Edge.End" Size="Size.Large"/>
    </MudStack>
    <MudDataGrid Items="@_filteredData" T="Dashboard" Class="custom-grid">
        <Columns>
            <PropertyColumn Property="x => x.GithubRepoUrl" Title="Repo URL"/>
            <PropertyColumn Property="x => x.StudentNeptun" Title="Neptun"/>
            <TemplateColumn Title="PRs">
                <CellTemplate>
                    <MudTooltip Text="@PrTooltip(context.Item)">
                        @JoinPullRequests(context.Item)
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            @* <PropertyColumn Property="x => JoinCiWorkflows(x)" Title="Workflows"/> *@
            <PropertyColumn Property="x => JoinScore(x)" Title="Score"/>
            <TemplateColumn Title="" T="Dashboard">
                <CellTemplate>
                    @if (MergedEntry(context.Item))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Success"/>
                    }
                    else if (CheckedEntry(context.Item))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                    }
                    else if (CiRunOnEntry(context.Item))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning"/>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error"/>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Assignment"/>
        </PagerContent>
    </MudDataGrid>
</LoadingComponent>

@code
{

    #region Data Grid helpers

    private string JoinPullRequests(Dashboard data)
    {
        //Kéne menteni a branch nevét is?
        return data.PullRequests?.FirstOrDefault()?.Url ?? "";
    }

    private string PrTooltip(Dashboard data)
    {
        return data.PullRequests?.FirstOrDefault()?.OpeningDate.ToString() ?? "";
    }

    private string JoinScore(Dashboard data)
    {
        return string.Join(", ", data.PullRequests?.FirstOrDefault()?.Scores.Select(x => x.Value) ?? []);
    }

    private bool MergedEntry(Dashboard data)
    {
        return data.PullRequests?.FirstOrDefault()?.Status == PullRequestStatus.Merged;
    }

    private bool CheckedEntry(Dashboard data)
    {
        var scores = data.PullRequests?.FirstOrDefault()?.Scores;
        return scores?.Count > 0 && scores.All(x => x.IsApproved);
    }

    private bool CiRunOnEntry(Dashboard data)
    {
        return data.PullRequests?.FirstOrDefault()?.Scores.Count > 0;
    }

    #endregion

    //Van e assignolt teacher?
    //Mikor pontoztak? Tooltip
    //PR status - closed szűrve
    private LoadingComponent loadingRef;

    private Subject? _selectedSubject = null;
    private string? _selectedCourse = null;
    private string? _selectedExercise = null;
    private IEnumerable<string>? _courses = new List<string>();
    private IEnumerable<string>? _tasks = new List<string>();
    private ICollection<Dashboard> _dashboardData = new List<Dashboard>();
    private ICollection<Dashboard> _filteredData = new List<Dashboard>();


    private async Task Loading()
    {
        _selectedSubject = SubjectService.CurrentSubject;
        _dashboardData = await DashboardClient.GetDashboardAsync(_selectedSubject.Id);
        _filteredData = _dashboardData.ToList();
        _courses = _dashboardData?.Select(x => x.CourseName).Distinct();
        _tasks = _dashboardData?.Select(x => x.ExerciseName).Distinct();
    }

    private void CourseChanged()
    {
        _filteredData = _dashboardData.Where(x => (_selectedCourse == null || x.CourseName == _selectedCourse) && (_selectedExercise == null || x.ExerciseName == _selectedExercise)).ToList();
        _courses = _dashboardData?.Select(x => x.CourseName).Distinct();
        _tasks = _dashboardData?.Select(x => x.ExerciseName).Distinct();
    }

    private void ExerciseChanged()
    {
        _filteredData = _dashboardData.Where(x => (_selectedCourse == null || x.CourseName == _selectedCourse) && (_selectedExercise == null || x.ExerciseName == _selectedExercise)).ToList();
        _courses = _dashboardData?.Select(x => x.CourseName).Distinct();
        _tasks = _dashboardData?.Select(x => x.ExerciseName).Distinct();
    }

    private void OnSubjectChanged()
    {
        loadingRef.StartLoading();
    }

    protected override void OnInitialized()
    {
        SubjectService.OnChange += OnSubjectChanged;
    }
}
