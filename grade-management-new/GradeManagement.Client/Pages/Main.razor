@page "/"
@using GradeManagement.Client.Components.NewDialogs
@using MudExtensions
@layout AuthenticatedLayout

@inject SubjectService SubjectService
@inject SubjectClient SubjectClient
@inject CourseClient CourseClient
@inject ExerciseClient ExerciseClient
@inject AssignmentClient AssignmentClient
@inject DashboardClient DashboardClient
@inject CrudSnackbarService SnackbarService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<style>
    .sort-direction-icon {
        --path-svg: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'
    }

    .sort-direction-icon.mud-direction-desc {
        --path-svg: 'M4.82 19 3.41 17.59l12-12L21 11.18l-1.42 1.41-4.17-4.17Z';
    }

    .sort-direction-icon.mud-direction-asc {
        --path-svg: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'
    }

    .custom-grid .mud-table-cell.pipa .column-header .column-options .sort-direction-icon path {
        d: path(var(--path-svg))
    }
</style>

<LoadingComponent LongTask="@Loading" @ref="loadingRef">
    <MudText Typo="Typo.h4" Class="mt-4">Dashboard</MudText>
    <MudDivider Class="mb-4"/>

    <MudStack Row="true" Class="mt-6">
        <MudSelectExtended Clearable="true" ItemCollection="_courses?.ToList()" SearchBox="true" SelectAllPosition="SelectAllPosition.AfterSearchBox" SelectAll="true" MultiSelection="true" @bind-SelectedValues="_selectedCourse" @bind-SelectedValues:after="FilterChanged" T="string" Label="Course" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
            @foreach (var course in _courses)
            {
                <MudSelectItemExtended T="string" Value="@course" Text="@course"/>
            }
        </MudSelectExtended>
        <MudSpacer/>
        <MudSelectExtended Clearable="true" ItemCollection="_tasks?.ToList()" SearchBox="true" SelectAllPosition="SelectAllPosition.AfterSearchBox" SelectAll="true" MultiSelection="true" @bind-SelectedValues="_selectedExercise" @bind-SelectedValues:after="FilterChanged" T="string" Label="Exercise" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
            @foreach (var task in _tasks)
            {
                <MudSelectItemExtended T="string" Value="@task" Text="@task"/>
            }
        </MudSelectExtended>
        <MudSpacer/>
        <MudSelect T="string"
                   Label="Status Filter"
                   MultiSelection="true"
                   @bind-SelectedValues="selectedStatuses"
                   OnClose="ApplyFilter"
                   Clearable="true"
                   Variant="Variant.Outlined">
            <MudSelectItem T="string" Value="@("Merged")">
                <div class="d-flex align-center gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Success" Size="Size.Small"/>
                    <MudText>Merged</MudText>
                </div>
            </MudSelectItem>
            <MudSelectItem T="string" Value="@("Checked")">
                <div class="d-flex align-center gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Size="Size.Small"/>
                    <MudText>Teacher Checked</MudText>
                </div>
            </MudSelectItem>
            <MudSelectItem T="string" Value="@("CiRun")">
                <div class="d-flex align-center gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Small"/>
                    <MudText>CI Flow Ran</MudText>
                </div>
            </MudSelectItem>
            <MudSelectItem T="string" Value="@("NoCi")">
                <div class="d-flex align-center gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Small"/>
                    <MudText>CI Did Not Run</MudText>
                </div>
            </MudSelectItem>
        </MudSelect>

        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Inherit" Edge="Edge.End" Size="Size.Large"/>
    </MudStack>
    <MudDataGrid Items="@_filteredData" T="Dashboard" Class="custom-grid" FilterDefinitions="@FilterDefinitions">
        <Columns>
            <PropertyColumn Property="x => x.CourseName" Title="Course"/>
            <PropertyColumn Property="x => x.ExerciseName" Title="Exercise"/>
            <TemplateColumn Title="Repo URL" Sortable="true" SortBy="dashboard => dashboard.GithubRepoUrl">
                <CellTemplate>
                    <MudLink Href="@context.Item.GithubRepoUrl">
                        @context.Item.GithubRepoUrl
                    </MudLink>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.StudentNeptun" Title="Neptun"/>
            <TemplateColumn T="Dashboard" Title="PRs" Class="pipa" Sortable="true" SortBy="@SortByPr">
                <CellTemplate>
                    <MudTooltip Text="@PrTooltip(context.Item)">
                        <MudLink Href="@JoinPullRequests(context.Item)">
                            @JoinPullRequests(context.Item)
                        </MudLink>
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            @* <PropertyColumn Property="x => JoinCiWorkflows(x)" Title="Workflows"/> *@
            <TemplateColumn T="Dashboard" Title="Score" Class="pipa" Sortable="true" SortBy="@SortByScore">
                <CellTemplate>
                    <MudTooltip Text="@ScoreTooltip(context.Item)">
                        @JoinScore(context.Item)
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="" T="Dashboard" Class="pipa" Sortable="true" SortBy="@SortByState">
                <CellTemplate>
                    @if (MergedEntry(context.Item))
                    {
                        <MudTooltip Text="Merged" Placement="Placement.Top">
                            <MudIcon Icon="@Icons.Material.Filled.Verified" Color="Color.Success"/>
                        </MudTooltip>
                    }
                    else if (CheckedEntry(context.Item))
                    {
                        <MudTooltip Text="Teacher Checked" Placement="Placement.Top">
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                        </MudTooltip>
                    }
                    else if (CiRunOnEntry(context.Item))
                    {
                        <MudTooltip Text="CI Flow ran" Placement="Placement.Top">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning"/>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="CI did not ran" Placement="Placement.Top">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error"/>
                        </MudTooltip>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Dashboard"/>
        </PagerContent>
    </MudDataGrid>
</LoadingComponent>

@code
{

    #region Data Grid helpers

    private string JoinPullRequests(Dashboard data)
    {
        //Kéne menteni a branch nevét is?
        return data.PullRequests?.FirstOrDefault()?.Url ?? "";
    }

    private string PrTooltip(Dashboard data)
    {
        return data.PullRequests?.FirstOrDefault()?.OpeningDate.ToLocalTime().ToString() ?? "";
    }

    private string JoinScore(Dashboard data)
    {
        return string.Join(", ", data.PullRequests?.FirstOrDefault()?.Scores.Select(x => x.Value) ?? []);
    }

    private bool MergedEntry(Dashboard data)
    {
        return data.PullRequests?.FirstOrDefault()?.Status == PullRequestStatus.Merged;
    }

    private bool CheckedEntry(Dashboard data)
    {
        var scores = data.PullRequests?.FirstOrDefault()?.Scores;
        return scores?.Count > 0 && scores.All(x => x.IsApproved);
    }

    private bool CiRunOnEntry(Dashboard data)
    {
        return data.PullRequests?.FirstOrDefault()?.Scores.Count > 0;
    }

    private string ScoreTooltip(Dashboard data)
    {
        return string.Join(", ", data?.PullRequests?.FirstOrDefault()?.Scores.Select(x => $"{x.ScoreType.Type}: {x.Value}") ?? []);
    }

    private object SortByState(Dashboard d)
    {
        if (MergedEntry(d))
        {
            return 4;
        }
        else if (CheckedEntry(d))
        {
            return 3;
        }
        else if (CiRunOnEntry(d))
        {
            return 2;
        }
        else
        {
            return 1;
        }
    }

    private object SortByScore(Dashboard d)
    {
        // The first element is the most important, than the second, and so on, sum the values, but before that, multiply the value with 10^x, where x is the position of the element in the list
        return d.PullRequests?.FirstOrDefault()?.Scores.Aggregate(0L, (currentSum, number) => (currentSum * 10) + number.Value) ?? 0;
    }

    private object SortByPr(Dashboard d)
    {
        return d.PullRequests?.FirstOrDefault()?.Url ?? "";
    }

    #endregion

    //Van e assignolt teacher?
    //Mikor pontoztak? Tooltip
    //PR status - closed szűrve
    private LoadingComponent loadingRef;

    private SubjectResponse? _selectedSubject = null;
    private IEnumerable<string> _selectedCourse = new List<string>();
    private IEnumerable<string> _selectedExercise = new List<string>();
    private IEnumerable<string>? _courses = new List<string>();
    private IEnumerable<string>? _tasks = new List<string>();
    private ICollection<Dashboard> _dashboardData = new List<Dashboard>();
    private ICollection<Dashboard> _filteredData = new List<Dashboard>();
    private IEnumerable<string> selectedStatuses = [];
    private List<IFilterDefinition<Dashboard>> FilterDefinitions = [];


    private void ApplyFilter()
    {
    }

    private async Task Loading()
    {
        _selectedSubject = SubjectService.CurrentSubject;
        //_selectedSubject = null;
        if (_selectedSubject == null)
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Nincs kiválasztott tantárgy. Szeretnél a varázsló oldalra navigálni?");
            parameters.Add("ButtonText", "Igen");
            parameters.Add("Color", Color.Primary);

            var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Figyelmeztetés", parameters, options);
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                NavigationManager.NavigateTo("/wizard");
                return;
            }

            return;
        }

        _dashboardData = await DashboardClient.GetDashboardAsync(_selectedSubject.Id);
        _filteredData = _dashboardData.ToList();
        _courses = _dashboardData?.Select(x => x.CourseName).Distinct();
        _tasks = _dashboardData?.Select(x => x.ExerciseName).Distinct();
        _selectedCourse = _courses?.ToList();
        _selectedExercise = _tasks?.ToList();
    }

    private void FilterChanged()
    {
        _filteredData = _dashboardData.Where(x => (_selectedCourse.Contains(x.CourseName)) && (_selectedExercise.Contains(x.ExerciseName))).ToList();
        _courses = _dashboardData?.Select(x => x.CourseName).Distinct();
        _tasks = _dashboardData?.Select(x => x.ExerciseName).Distinct();
    }

    private void OnSubjectChanged()
    {
        loadingRef.StartLoading();
    }

    protected override void OnInitialized()
    {
        SubjectService.OnChange += OnSubjectChanged;

        FilterDefinitions.Add(new FilterDefinition<Dashboard>
        {
            FilterFunction = x =>
            {
                if (!selectedStatuses.Any())
                    return true;
                if (selectedStatuses.Contains("Merged") && MergedEntry(x))
                    return true;
                if (selectedStatuses.Contains("Checked") && CheckedEntry(x) && !MergedEntry(x))
                    return true;
                if (selectedStatuses.Contains("CiRun") && CiRunOnEntry(x) && !CheckedEntry(x) && !MergedEntry(x))
                    return true;
                if (selectedStatuses.Contains("NoCi") && !CiRunOnEntry(x) && !CheckedEntry(x) && !MergedEntry(x))
                    return true;
                return false;
            }
        });
    }
}
