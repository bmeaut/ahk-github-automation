@page "/students"
@using GradeManagement.Client.Components.NewDialogs
@layout AuthenticatedLayout

@inject HttpClient Http
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject StudentClient StudentClient
@attribute [Authorize(Policy = Policy.RequireTeacher)]

<PageTitle>Students</PageTitle>

<LoadingComponent LongTask="Loading" @ref="loadingRef">
    <MudText Typo="Typo.h4" Class="mt-4">Students</MudText>
    <MudDivider Class="mb-4"/>
    <MudDataGrid T="StudentResponse" Items="_students" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" Editable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.NeptunCode" Title="Neptun Code"/>
            <DataGridActions TItem="StudentResponse" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem" ShowDelete="false" ShowEdit="false"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private ICollection<StudentResponse> _students = new List<StudentResponse>();
    private LoadingComponent loadingRef;


    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewStudentDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            await StudentClient.CreateAsync(result.Data as StudentRequest);
            SnackbarService.ShowAddSuccess();
            await loadingRef.StartLoading();
        }
    }

    private async Task StartEditing(CellContext<StudentResponse?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task Loading()
    {
        _students = await StudentClient.GetAllAsync();
    }

    private async Task CommittedItemChanges(StudentResponse items)
    {
        //await StudentClient.UpdateAsync(items);
        SnackbarService.ShowError("Update not implemented!");
        await loadingRef.StartLoading();
    }

    private async Task DeleteItem(StudentResponse item)
    {
        //await StudentClient.DeleteAsync(item.Id);
        //TODO: ppthez modositva
        SnackbarService.ShowDeleteError();
        await loadingRef.StartLoading();
    }

}
