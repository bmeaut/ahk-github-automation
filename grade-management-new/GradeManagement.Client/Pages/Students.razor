@page "/students"
@layout AuthenticatedLayout

@inject HttpClient Http
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject MockClient StudentClient

<LoadingComponent IsLoading="@_isLoading">
    <MudDataGrid T="Student" Items="_students" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.NeptunCode" Title="Neptun Code"/>
            <DataGridActions TItem="Student" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private ICollection<Student> _students = new List<Student>();
    private bool _isLoading = true;

    readonly string BaseUrl = Endpoints.LANGUAGES;


    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewStudentDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            _students.Add(result.Data as Student);
            //TODO: Do others through API
            var response = await Http.PostAsJsonAsync(BaseUrl, result.Data);
            if (response.IsSuccessStatusCode)
            {
                Student newObject = await response.Content.ReadFromJsonAsync<Student>();
                //Right now it needs Student list to be filled
                _students.Remove(result.Data as Student);
                _students.Add(newObject);
                SnackbarService.ShowAddSuccess();
            }
            else
            {
                _students.Remove(result.Data as Student);
                await Console.Error.WriteLineAsync("Error");
                SnackbarService.ShowAddError();
            }
        }
    }

    private async Task StartEditing(CellContext<Student?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _students = await StudentClient.GetAllAsync<Student>();
        _isLoading = false;
    }

    private async Task CommittedItemChanges(Student items)
    {
        var response = await Http.PutAsJsonAsync($"{BaseUrl}/{items.Id}", items);
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowEditError();
        }
        else
        {
            SnackbarService.ShowEditSuccess();
        }
    }

    private async Task DeleteItem(Student item)
    {
        _students.Remove(item);
        var response = await Http.DeleteAsync($"{BaseUrl}/{item.Id}");
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowDeleteError();
        }
        else
        {
            SnackbarService.ShowDeleteSuccess();
        }

        StateHasChanged();
    }

}
