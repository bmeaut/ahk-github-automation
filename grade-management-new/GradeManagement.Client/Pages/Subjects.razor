@page "/subjects"
@using GradeManagement.Client.Components.NewDialogs
@layout AuthenticatedLayout
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject SubjectClient SubjectClient

<PageTitle>Subjects</PageTitle>

<MudText Typo="Typo.h4" Class="mt-4">Subjects</MudText>
<MudDivider Class="mb-4"/>
        <LoadingComponent LongTask="@LoadingAction" @ref="loadingComponentRef">
            <MudDataGrid Items="_subjects" T="Subject2" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Id" Editable="false"/>
                    <PropertyColumn Property="x => x.Name" Title="Name"/>
                    <PropertyColumn Property="x => x.NeptunCode" Title="Neptun Code"/>
                    <PropertyColumn Property="x => x.GitHubOrgName" Title="Github Org Name"/>
                    <DataGridActions TItem="Subject2" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
                </Columns>
            </MudDataGrid>
            <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
        </LoadingComponent>

@code {
    private List<Subject2> _subjects = new();
    private LoadingComponent loadingComponentRef;

    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewSubjectDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            await SubjectClient.CreateAsync(result.Data as Subject2);
            SnackbarService.ShowAddSuccess();
            await loadingComponentRef.StartLoading();
            SubjectService.CurrentSubject = _subjects.LastOrDefault(s => s.Name == (result.Data as Subject2).Name).ToSubject();
        }
    }

    private async Task StartEditing(CellContext<Subject2?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task LoadingAction()
    {
        _subjects = (await SubjectService.LoadSubjects()).Select(subject => subject.ToSubject2()).ToList();
    }

    private async Task CommittedItemChanges(Subject2 item)
    {
        await SubjectClient.UpdateAsync(item.Id, item);
        SnackbarService.ShowEditSuccess();
    }

    private async Task DeleteItem(Subject2 item)
    {
        await SubjectClient.DeleteAsync(item.Id);
        SnackbarService.ShowDeleteSuccess();
        loadingComponentRef?.StartLoading();
    }

}
