@page "/subjects"
@using GradeManagement.Client.Components.NewDialogs
@layout AuthenticatedLayout
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject SubjectClient SubjectClient

@attribute [Authorize(Policy = Policy.RequireTeacher)]

<PageTitle>Subjects</PageTitle>

<MudText Typo="Typo.h4" Class="mt-4">Subjects</MudText>
<MudDivider Class="mb-4"/>
<LoadingComponent LongTask="@LoadingAction" @ref="loadingComponentRef">
    <MudDataGrid Items="_subjects" T="SubjectResponse" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" Editable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.NeptunCode" Title="Neptun Code"/>
            <PropertyColumn Property="x => x.GitHubOrgName" Title="Github Org Name"/>
            <DataGridActions TItem="SubjectResponse" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private List<SubjectResponse> _subjects = new();
    private LoadingComponent loadingComponentRef;

    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewSubjectDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            SubjectResponse ret = await SubjectClient.CreateAsync(result.Data as SubjectRequest);
            SnackbarService.ShowAddSuccess();
            await loadingComponentRef.StartLoading();
            SubjectService.CurrentSubject = ret;
        }
    }

    private async Task StartEditing(CellContext<SubjectResponse?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task LoadingAction()
    {
        _subjects = await SubjectService.LoadSubjects();
    }

    private async Task CommittedItemChanges(SubjectResponse item)
    {
        await SubjectClient.UpdateAsync(item.Id, item.ToRequest());
        SnackbarService.ShowEditSuccess();
    }

    private async Task DeleteItem(SubjectResponse item)
    {
        await SubjectClient.DeleteAsync(item.Id);
        if (SubjectService.CurrentSubject?.Id == item.Id)
        {
            SubjectService.CurrentSubject = _subjects.FirstOrDefault() ?? null;
        }

        SnackbarService.ShowDeleteSuccess();
        loadingComponentRef?.StartLoading();
    }

}
