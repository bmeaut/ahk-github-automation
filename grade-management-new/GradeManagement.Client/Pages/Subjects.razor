@page "/subjects"
@inject HttpClient Http
@inject IDialogService DialogService

<PageTitle>Subjects</PageTitle>

<LoadingComponent IsLoading="@_isLoading">
    <MudDataGrid Items="_subjects" T="Subject" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.NeptunCode" Title="Description"/>
            <TemplateColumn Title="Actions">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@context.Actions.StartEditingItemAsync"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteItem(context.Item))"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private List<Subject> _subjects = new();
    private bool _isLoading = true;

    readonly string BaseUrl = Endpoints.SUBJECTS;

    /*private string[] EditableProperties =
    [
        "Name", "NeptunCode"
    ];*/

    private async Task<List<Subject>> LoadSubjects()
    {
        return await Http.GetFromJsonAsync<List<Subject>>(BaseUrl) ?? new List<Subject>();
    }

    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewSubjectDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            _subjects.Add(result.Data as Subject);
            var response = await Http.PostAsJsonAsync(BaseUrl, result.Data);
            if (response.IsSuccessStatusCode)
            {
                Subject newObject = await response.Content.ReadFromJsonAsync<Subject>();
                //Right now it needs Course list to be filled
                _subjects.Remove(result.Data as Subject);
                _subjects.Add(newObject);
            }
            else
            {
                _subjects.Remove(result.Data as Subject);
                await Console.Error.WriteLineAsync("Error");
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _subjects = await LoadSubjects();
        _isLoading = false;
    }

    private async Task CommittedItemChanges(Subject items)
    {
        var response = await Http.PutAsJsonAsync($"{BaseUrl}/{items.Id}", items);
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
        }
    }

    private async Task DeleteItem(Subject item)
    {
        _subjects.Remove(item);
        var response = await Http.DeleteAsync($"{BaseUrl}/{item.Id}");
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
        }
    }

}
