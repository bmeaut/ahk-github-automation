@page "/teachers"
@layout AuthenticatedLayout

@inject HttpClient Http
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject UserClient UserClient

<LoadingComponent @ref="loadingComponentRef" LongTask="@_loading">
    <MudDataGrid T="User" Items="_teachers" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.NeptunCode" Title="Neptun Code"/>
            <PropertyColumn Property="x => x.GithubId" Title="Github Id"/>
            <PropertyColumn Property="x => x.BmeEmail" Title="Bme Email"/>
            <PropertyColumn Property="x => x.Type" Title="Type"/>
            <TemplateColumn Title="Actions">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(() => StartEditing(context))"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteItem(context.Item))"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private ICollection<User> _teachers = new List<User>();
    private Subject _subject = new();
    private bool _isLoading = true;
    private LoadingComponent? loadingComponentRef;

    readonly string BaseUrl = Endpoints.TEACHERS;


    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewTeacherDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            User newTeacher = result.Data as User;
            _teachers.Add(newTeacher);
            var response = await Http.PostAsJsonAsync(BaseUrl, newTeacher);
            if (response.IsSuccessStatusCode)
            {
                //TODO: This is a workaround, it should be fixed
                User newObject = await response.Content.ReadFromJsonAsync<User>();
                //Right now it needs Teacher list to be filled
                _teachers.Remove(newTeacher);
                _teachers.Add(newObject);
                response = await Http.PutAsJsonAsync($"{Endpoints.SUBJECTS}/{_subject.Id}", _subject);
                if (response.IsSuccessStatusCode)
                {
                    SnackbarService.ShowAddSuccess();
                }
                else
                {
                    await Console.Error.WriteLineAsync("Error");
                    SnackbarService.ShowAddError();
                }
            }
            else
            {
                _teachers.Remove(result.Data as User);
                await Console.Error.WriteLineAsync("Error");
                SnackbarService.ShowAddError();
            }
        }
    }

    private async Task StartEditing(CellContext<User?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task _loading()
    {
        _teachers = await UserClient.GetAllAsync();
    }

    private async Task CommittedItemChanges(User items)
    {
        var response = await Http.PutAsJsonAsync($"{BaseUrl}/{items.Id}", items);
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowEditError();
        }
        else
        {
            SnackbarService.ShowEditSuccess();
        }
    }

    private async Task DeleteItem(User item)
    {
        _teachers.Remove(item);
        var response = await Http.DeleteAsync($"{BaseUrl}/{item.Id}");
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowDeleteError();
        }
        else
        {
            SnackbarService.ShowDeleteSuccess();
        }

        StateHasChanged();
    }

    private void OnSubjectChanged()
    {
        loadingComponentRef?.StartLoading();
    }

    protected override void OnInitialized()
    {
        SubjectService.OnChange += OnSubjectChanged;
    }

    public void Dispose()
    {
        SubjectService.OnChange -= OnSubjectChanged;
    }

}
