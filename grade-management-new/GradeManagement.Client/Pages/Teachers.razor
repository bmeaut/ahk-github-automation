@page "/teachers"
@using GradeManagement.Client.Components.NewDialogs
@layout AuthenticatedLayout

@inject HttpClient Http
@inject IDialogService DialogService
@inject CrudSnackbarService SnackbarService
@inject SubjectService SubjectService
@inject SubjectClient SubjectClient
@inject UserClient UserClient

<LoadingComponent @ref="loadingComponentRef" LongTask="@_loading">
    <MudText>Teachers</MudText>
    <MudDataGrid T="User" Items="_teachers" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.NeptunCode" Title="Neptun Code"/>
            <PropertyColumn Property="x => x.GithubId" Title="Github Id"/>
            <PropertyColumn Property="x => x.BmeEmail" Title="Bme Email"/>
            <TemplateColumn Title="Type">
                <CellTemplate>
                    @context.Item.Type
                </CellTemplate>
                <EditTemplate>
                    <SelectUserType @bind-Value="@context.Item.Type"/>
                </EditTemplate>
            </TemplateColumn>
            <DataGridActions TItem="User" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
        </Columns>
    </MudDataGrid>
    <MudFab Style="position:fixed; bottom:50px;right:50px" Color="@Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@OpenDialog"/>
</LoadingComponent>

@code {
    private ICollection<User> _teachers = new List<User>();
    private LoadingComponent loadingComponentRef;


    private async Task OpenDialog()
    {
        var dialog = await DialogService.ShowAsync<NewTeacherDialog>("Hello");
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            var user = result.Data as User;
            user = await UserClient.CreateAsync(user);
            //SnackbarService.ShowMessage("user id:" + user.Id);
            var subject = SubjectService.CurrentSubject;
            //await SubjectClient.AddTeacherToSubjectAsync(subject.Id, user.Id);
            _teachers.Add(user);
            var subject2 = new Subject2
            {
                Id = subject.Id,
                Teachers = _teachers,
                GitHubOrgName = subject.GitHubOrgName,
                Name = subject.Name,
                NeptunCode = subject.NeptunCode,
            };
            await SubjectClient.UpdateAsync(subject2.Id, subject2);
            SnackbarService.ShowAddSuccess();
            await loadingComponentRef.StartLoading();
        }
    }

    private async Task StartEditing(CellContext<User?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task _loading()
    {
        _teachers = await SubjectClient.GetAllTeachersByIdAsync(SubjectService.CurrentSubject.Id);
    }

    private async Task CommittedItemChanges(User items)
    {
        await UserClient.UpdateAsync(items.Id, items);
        SnackbarService.ShowEditSuccess();
        // Run the StartLoading method asynchronously after a short delay
        _ = Task.Run(async () =>
        {
            await Task.Delay(1); // Delay for 100 milliseconds
            await loadingComponentRef.StartLoading();
        });
    }

    private async Task DeleteItem(User item)
    {
        await UserClient.DeleteAsync(item.Id);
        _teachers.Remove(item);
        var subject = SubjectService.CurrentSubject;
        var subject2 = new Subject2
        {
            Id = subject.Id,
            Teachers = _teachers,
            GitHubOrgName = subject.GitHubOrgName,
            Name = subject.Name,
            NeptunCode = subject.NeptunCode,
        };
        await SubjectClient.UpdateAsync(subject2.Id, subject2);
        SnackbarService.ShowDeleteSuccess();
        await loadingComponentRef.StartLoading();
    }

    private void OnSubjectChanged()
    {
        loadingComponentRef?.StartLoading();
    }

    protected override void OnInitialized()
    {
        SubjectService.OnChange += OnSubjectChanged;
    }

    public void Dispose()
    {
        SubjectService.OnChange -= OnSubjectChanged;
    }

}
