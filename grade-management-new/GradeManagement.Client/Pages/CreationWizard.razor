@page "/wizard"
@layout AuthenticatedLayout
@inject CrudSnackbarService SnackbarService
@inject IDialogService DialogService
@inject SubjectClient SubjectClient
@inject SubjectService SubjectService
@inject LanguageClient LanguageClient
@inject SemesterClient SemesterClient
@inject CourseClient CourseClient
@inject NavigationManager NavigationManager

@using GradeManagement.Client.Components.NewDialogs
@using MudExtensions
@using MudBlazor.Extensions
@using MudExtensions.Utilities

<MudCard Class="d-flex align-center justify-center mt-5 mx-2">
    <MudCardContent Style="width: 100%">
        <MudStepperExtended @ref="_stepper" Class="mud-width-full" Variant="_variant"
                            ShowPreviousButton="_showPreviousButton" ShowNextButton="_showNextButton" ShowStepResultIndicator="_showStepResultIndicator" HeaderBadgeView="HeaderBadgeView.All"
                            HeaderTextView="HeaderTextView.All" HeaderSize="_headerSize"
                            StepperActionsJustify="StepperActionsJustify.SpaceBetween">
            @* <StaticContent> *@
            @*     <MudStack Row="true" AlignItems="AlignItems.Center"> *@
            @*         <MudAvatar Color="_color">ST</MudAvatar> *@
            @*         <MudText>This is a static content which shows with each step.</MudText> *@
            @*     </MudStack> *@
            @* </StaticContent> *@
            <ChildContent>
                <MudStepExtended Icon="@Icons.Material.Filled.Book" Title="New Subject" StatusChanged="StatusChanged">
                    <ChildContent>
                        <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowNewSubjectDialog">Add New Subject</MudButton>
                        </div>
                    </ChildContent>
                </MudStepExtended>
                <MudStepExtended Icon="@Icons.Material.Filled.Language" Title="New Language" Optional="true">
                    <ChildContent>
                        <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowNewLanguageDialog">Add New Language</MudButton>
                        </div>
                    </ChildContent>
                </MudStepExtended>
                <MudStepExtended Icon="@Icons.Material.Filled.CalendarToday" Title="New Semester" Optional="true">
                    <ChildContent>
                        <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowNewSemesterDialog">Add New Semester</MudButton>
                        </div>
                    </ChildContent>
                </MudStepExtended>
                <MudStepExtended Icon="@Icons.Material.Filled.School" Title="New Course" Optional="true">
                    <ChildContent>
                        <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowNewCourseDialog">Add New Course</MudButton>
                        </div>
                    </ChildContent>
                </MudStepExtended>

                <MudStepExtended Icon="@Icons.Material.Filled.Assessment" Title="Result Step" IsResultStep="true">
                    <ChildContent>
                        <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                            <MudText>For additional steps view Course.</MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToCourse">Course view</MudButton>
                        </div>
                    </ChildContent>
                </MudStepExtended>
            </ChildContent>
        </MudStepperExtended>
    </MudCardContent>
</MudCard>

@code {
    MudStepperExtended _stepper;
    Variant _variant = Variant.Filled;
    bool _showPreviousButton = true;
    bool _showNextButton = true;
    bool _showStepResultIndicator = true;
    bool _addResultStep = true;
    Color _color = Color.Primary;
    Size _headerSize = Size.Medium;

    Course? _course;

    private async Task ShowNewSubjectDialog()
    {
        var dialog = await DialogService.ShowAsync<NewSubjectDialog>("Hello");
        var result = await dialog.Result ?? DialogResult.Cancel();
        if (!result.Canceled && result.Data != null)
        {
            Subject ret = await SubjectClient.CreateAsync(result.Data as Subject2);
            SnackbarService.ShowAddSuccess();
            SubjectService.CurrentSubject = ret;
            await _stepper.CompleteStep(0);
        }
        else if (!result.Canceled)
        {
            SnackbarService.ShowAddError("Subject creation failed.");
        }
    }

    private async Task ShowNewLanguageDialog()
    {
        var dialog = await DialogService.ShowAsync<NewLanguageDialog>("Hello");
        var result = await dialog.Result ?? DialogResult.Cancel();
        if (!result.Canceled && result.Data != null)
        {
            Language ret = await LanguageClient.CreateAsync(result.Data as Language);
            SnackbarService.ShowAddSuccess();
            await _stepper.CompleteStep(1);
        }
        else if (!result.Canceled)
        {
            SnackbarService.ShowAddError("Language creation failed.");
        }
    }

    private async Task ShowNewSemesterDialog()
    {
        var dialog = await DialogService.ShowAsync<NewSemesterDialog>("Hello");
        var result = await dialog.Result ?? DialogResult.Cancel();
        if (!result.Canceled && result.Data != null)
        {
            Semester ret = await SemesterClient.CreateAsync(result.Data as Semester);
            SnackbarService.ShowAddSuccess();
            await _stepper.CompleteStep(2);
        }
        else if (!result.Canceled)
        {
            SnackbarService.ShowAddError("Semester creation failed.");
        }
    }

    private async Task ShowNewCourseDialog()
    {
        var dialog = await DialogService.ShowAsync<NewCourseDialog>("Hello");
        var result = await dialog.Result ?? DialogResult.Cancel();
        if (!result.Canceled && result.Data != null)
        {
            var newCourse = result.Data as Course;
            newCourse.SubjectId = SubjectService.CurrentSubject.Id;
            _course = await CourseClient.CreateAsync(newCourse);
            await _stepper.CompleteStep(3);
        }
        else if (!result.Canceled)
        {
            SnackbarService.ShowAddError("Course creation failed.");
        }
    }

    private void NavigateToCourse()
    {
        if (_course != null)
        {
            NavigationManager.NavigateTo($"/courses/{_course.Id}");
        }
        else
        {
            SnackbarService.ShowError("Course not created.");
        }
    }

    private void StatusChanged(StepStatus status)
    {
        //Snackbar.Add($"First step {status.ToDescriptionString()}.", Severity.Info);
    }

}
