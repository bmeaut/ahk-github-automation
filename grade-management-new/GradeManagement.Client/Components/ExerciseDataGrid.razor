@using GradeManagement.Client.Pages
@inject HttpClient Http
@inject CrudSnackbarService SnackbarService

<MudDataGrid T="Exercise" Items="Values" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges" Style="width: 100%">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
        <PropertyColumn Property="x => x.Name" Title="Name"/>
        <PropertyColumn Property="x => x.GithubPrefix" Title="Github Prefix"/>
        <DataGridActions TItem="Exercise" OnEditItem="@StartEditing" OnDeleteItem="@DeleteItem"/>
    </Columns>
</MudDataGrid>


@code {
    [Parameter] public List<Exercise> Values { get; set; }

    string BaseUrl = Endpoints.EXERCISES;

    private async Task StartEditing(CellContext<Exercise?> context)
    {
        await context.Actions.StartEditingItemAsync();
        StateHasChanged();
    }

    private async Task CommittedItemChanges(Exercise items)
    {
        var response = await Http.PutAsJsonAsync($"{BaseUrl}/{items.Id}", items);
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowEditError();
        }
        else
        {
            SnackbarService.ShowEditSuccess();
        }
    }

    private async Task DeleteItem(Exercise item)
    {
        Values.Remove(item);
        var response = await Http.DeleteAsync($"{BaseUrl}/{item.Id}");
        if (!response.IsSuccessStatusCode)
        {
            await Console.Error.WriteLineAsync("Error");
            SnackbarService.ShowDeleteError();
        }
        else
        {
            SnackbarService.ShowDeleteSuccess();
        }

        StateHasChanged();
    }

}
