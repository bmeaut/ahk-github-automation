@using System.Reflection
@typeparam T
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h4">New Item</MudText>
    </TitleContent>
    <DialogContent>
        @foreach (var property in typeof(T).GetProperties().Where(p => PropertyFilter(p)))
        {
            <MudTextField T="string" Label="@GetLabel(property)" Value="@GetValue(property)" ValueChanged="@((string newValue) => SetValue(property, newValue))"/>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(value));
    void Cancel() => MudDialog.Cancel();

    [Parameter] public T value { get; set; }
    [Parameter] public Func<PropertyInfo, bool> PropertyFilter { get; set; } = p => true;
    [Parameter] public Func<PropertyInfo, string> LabelProvider { get; set; } = p => p.Name;

    private string GetValue(PropertyInfo property)
    {
        return property.GetValue(value)?.ToString() ?? string.Empty;
    }

    private void SetValue(PropertyInfo property, object newValue)
    {
        property.SetValue(value, newValue);
    }

    private string GetLabel(PropertyInfo property)
    {
        return LabelProvider?.Invoke(property) ?? property.Name;
    }

}
